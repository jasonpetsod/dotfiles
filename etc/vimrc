set nocompatible

" backups are lame
set nobackup
set nowritebackup

" UI
set ruler
set showcmd
set background=dark
set wildmode=list:longest
set backspace=indent,eol,start
set scrolloff=1
set hidden
syntax on

" windows
set splitright

" search options
set incsearch
set ignorecase
set smartcase
set report=0

" whitespace formatting
set autoindent
set tabstop=4
set shiftwidth=4
set shiftround
set nowrap
set expandtab
set smarttab
set textwidth=78
set listchars=tab:>-,trail:.
set nojoinspaces
filetype plugin indent on

" modelines
set modeline
set modelines=5

" spelling
set spelllang=en_us,en_gb
set spellfile=~/.spell.add

" plugin options
let g:EnhCommentifyUserBindings = 'yes'

" allow <LEADER>K and :Man to split man page
runtime! ftplugin/man.vim

" grep
set grepprg=ack

" leaders
let mapleader = ","
let maplocalleader = ","

" ============================================================================
" GUI options
" ============================================================================

if has("gui_running")
    colorscheme zenburn

    " remove GUI elements
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
endif

" ============================================================================
" colors
" ============================================================================

if &t_Co == 256
    let g:zenburn_high_Contrast = 1
    let g:zenburn_alternate_Visual = 1
    colorscheme zenburn
endif

" ============================================================================
" GNU screen titles
" ============================================================================

if &term == "screen"
    function! SetTitle(s)
        let s = a:s

        if strlen(s) == 0
            let s = "(no name)"
        endif

        let &titlestring = s
    endfunction

    set t_ts=k
    set t_fs=\
    set title

    " actually set the title
    call SetTitle(expand("%:t"))

    " update title when filename or buffer changes
    au! BufWritePost,BufEnter * call SetTitle(expand("%:t"))
endif

" ============================================================================
" mappings/abbreviations
" ============================================================================

" remappings for my silly mistakes
imap [:w <ESC>:w<RETURN>
imap [:W <ESC>:w<RETURN>
imap {:w <ESC>:w<RETURN>
imap {:W <ESC>:w<RETURN>
cabbrev W w
cabbrev Q q
cabbrev Wq wq
cabbrev WQ wq

" paragraph reformatting
vnoremap Q gq
nnoremap Q gqap

" run make
nnoremap <C-e> :w!<RETURN>:make<RETURN>

" paste/nopaste toggle
set pastetoggle=<F7>

" spell/nospell toggle
nnoremap <SILENT> <F6> :set nospell!<RETURN>
inoremap <SILENT> <F6> <ESC>:set nospell!<RETURN>a

" make Shift-Tab work
map <Esc>[Z <S-TAB>

" quicker :w, :wq
map <LEADER>, :w<RETURN>
map <LEADER>. :wq<RETURN>

" export syntax-highlighted file
map <LEADER>H :runtime! syntax/2html.vim<RETURN>

" reload/edit vimrc
map <LEADER>v :split ~/.vimrc<RETURN>
map <LEADER>r :source ~/.vimrc<RETURN>

" taglist
map <silent> <LEADER>t :TlistToggle<RETURN>

" commenting
vnoremap <silent> ] :call EnhancedCommentify('yes', 'comment')<RETURN>
vnoremap <silent> [ :call EnhancedCommentify('no', 'decomment')<RETURN>

" buffers
map <silent> <LEADER><TAB> :bnext<RETURN>
map <silent> <LEADER>` :bprev<RETURN>
map <silent> <LEADER>b :FufBuffer<RETURN>
map <silent> <LEADER>d :bdelete<RETURN>
map <silent> <LEADER>e :FufFile<RETURN>

map <silent> <C-h> <C-w>h
map <silent> <C-j> <C-w>j
map <silent> <C-k> <C-w>k
map <silent> <C-l> <C-w>l

" split alternate file
map <silent> <LEADER>a :call AlternateFile('h')<RETURN>

" save with sudo
cmap w!! %!sudo tee > /dev/null %

" ============================================================================
" filetype-specific
" ============================================================================

" FIXME
" let @a = g:comment_char . " " . @b . "\n"
" let @b = "============================================================================"

augroup c
    au!
    au BufNewFile,BufReadPost *.h set ft=c
    au FileType c set wildignore=*.o
augroup END

" LaTeX files
augroup tex
    au!
    au BufNewFile,BufReadPost *.tex set ft=tex

    au FileType tex nnoremap <C-t> :w!<RETURN>:!pdflatex -interaction=nonstopmode "%"<RETURN>
    au FileType tex set spell
augroup END

" mail messages
augroup mail
    au!
    au FileType mail set notitle
    au FileType mail set spell
    au FileType mail set tw=75
augroup END

" Mako templates
augroup mako
    au!
    au BufNewFile,BufReadPost *.mako set ft=mako
augroup END

" Objective-C files
augroup objc
    au!
    au BufNewFile,BufReadPost *.m set ft=objc
    au FileType objc set cindent
augroup END

" Perl scripts
iab pl! <ESC>:r ~/.vim/perl_skel<RETURN>:set ft=perl<RETURN>ggdd/%start%/<RETURN><ESC>ddO

augroup perl
    au!
    au FileType perl iab uddmp use Data::Dumper;<RETURN>print Dumper
    au FileType perl iab ddmp print Dumper
augroup END

" Python scripts
augroup python
    au!
    au Syntax python source ~/.vim/syntax/python.vim
    let python_highlight_all = 1
augroup END

" text files
augroup text
    au!
    au FileType text set spell
augroup END

" ============================================================================
" tcd
" ============================================================================

" taken from eclim (http://eclim.org/)

" Tcd(dir)
" Like vim's :lcd, but tab local instead of window local.
function Tcd(dir)
  let t:cwd = fnamemodify(a:dir, ':p')

  " initialize the tab cwd for all other tabs if not already set
  let curtab = tabpagenr()
  try
    let index = 1
    while index <= tabpagenr('$')
      if index != curtab
        exec 'tabn ' . index
        if !exists('t:cwd')
          let t:cwd = getcwd()
          " try to find a window without a localdir if necessary
          if haslocaldir()
            let curwin = winnr()
            let windex = 1
            while windex <= winnr('$')
              if windex != curwin
                exec windex . 'winc w'
                if !haslocaldir()
                  let t:cwd = getcwd()
                  break
                endif
              endif
              let windex += 1
            endwhile
            exec curwin . 'winc w'
          endif
        endif
      endif
      let index += 1
    endwhile
  finally
    exec 'tabn ' . curtab
  endtry

  call s:ApplyTcd(0)

  augroup tcd
    autocmd!
    autocmd TabEnter * call <SID>ApplyTcd(1)
  augroup END
endfunction

function s:ApplyTcd(honor_lcd)
  if !exists('t:cwd')
    return
  endif

  if a:honor_lcd && haslocaldir()
    let lcwd = getcwd()
    exec 'cd ' . escape(t:cwd, ' ')
    exec 'lcd ' . escape(lcwd, ' ')
  else
    exec 'cd ' . escape(t:cwd, ' ')
  endif
endfunction

command -nargs=1 -complete=dir Tcd :call Tcd('<args>')
cabbrev tcd Tcd
